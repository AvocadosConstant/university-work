lab1 [-u] [-g] [-n <num-integers>] [-m <min-int>] [-M <max-int>] [-s <seed>]
[-i <input-file-name>] [-o <output-file-name>] [-c <count-file-name>]

-u
Print a usage string for your program on stderr and then exit. If –u appears anywhere on the command 
line, the program should ignore all other arguments, print the usage string, and exit.

-g
This option puts your program in generate mode, causing it to generate input that could subsequently be 
read and sorted by a different invocation of your program. As described above, when the program is run in 
generate mode, it does not read and sort any integers, nor report timing information; instead, it simply 
generates a sequence of random integers within a specified (or default) range, and exits. The generated 
output should begin with a non-negative integer that indicates how many integers follow. Your program 
should generate subsequent integers randomly, to fall within the range [<min-int>, <max-int>], 
inclusive. Your program should generate <num-integers> integers for the file. <min-in>, <maxint>,
and <num-integers> all have default values that can be changed with command line parameters, 
as described below. If –g is not specified, your program should operate in sort mode (i.e. sort mode is the 
default).

-n <num-integers>
When –g is also specified to cause your program to operate in generate mode, your program should 
generate <num-integers> integers. When –g is not specified (causing your program to operate 
in sort mode), your program should read (at most) the first <num-integers> values from the 
input file (or from standard input), sort them, and write them out to the output file (or standard 
output). If the input file contains more than <num-integers> values, your program should 
simply ignore the rest. If the input indicates that N integers reside in the input file, but the file 
contains fewer, you should sort only the ones that appear in the input. The minimum value for 
<num-integers> is 0. The default value for <num-integers> is 100. The maximum value for 
<num-integers> is 1,000,000. If the user specifies an out-of-range value for <num-integers>
(less than 0 or greater than 1,000,000), print an informative error message to stderr and exit 
immediately.

-m <min-int>
In generate mode, your program should generate integers no smaller than <min-int>.
In sort mode, your program should check for integers in the input that have a value less than 
<min-int>, and halt with an informative error message as soon as the first one appears. The 
default and minimum acceptable value for <min-int> is 1.

-M <max-int>
In generate mode, your program should generate integers no larger than <max-int>. 
In sort mode, your program should check for integers in the input have a value greater than <maxint>,
and halt with an informative error message as soon as the first one appears. The default 
value for <max-int> is 255. The maximum value for <max-int> is 1,000,000. <max-int> must 
not be less than <min-int>.

-s <seed>
By default, in generate mode your program should seed the random number generator with a value 
derived from reading the system clock. If the user specifies the –s option, then your program 
should instead seed the random number generator with <seed>. You may assume that <seed> is 
an unsigned long (and pass it directly to srand()). (When writing code that produces pseudorandom
values for testing, seeding the random number generator with a time value is good 
practice. When debugging your code, you often want the same random values to be produced for 
every run, so that the same behavior occurs each run. This option allows you to select whether the 
numbers are pseudo-random or deterministic, on the command line.)

-i <input-file-name>
By default, your program should read input from stdin. If –i is specified on the command line, it 
should instead read input from the file named <input-file-name>. 

-o <output-file-name>
By default, your program should write output to stdout. If –o is specified on the command line, it 
should instead write output to the file named <output-file-name>.  In generate mode, your 
program writes randomly generated integers into <output-file-name>. In sort mode, your 
program should write the sorted integers into <output-file-name>. Your program should 
overwrite the contents of <output-file-name> if it exists when your program is invoked.

-c <count-file-name>
As described above, your program should write the ascii value and a count of the number of 
instances of each letter in the Unix username of the person running the program. (Do not hardcode 
your own userid into your program!) By default, your program should write these values and 
counts to stdout. If the user specifies the –c option, then your program should write the counts to 
<count-file-name>.
